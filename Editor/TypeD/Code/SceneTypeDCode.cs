using System.Collections.Generic;
using System.IO;
using TypeD.Helpers;
using TypeD.Models;

namespace TypeD.Code
{
    class SceneTypeDCode : Codalyzer
    {
        public class SceneTypeDCodeData
        {
            public List<string> Entities { get; set; } = new List<string>();
        }

        public SceneTypeDCodeData Data { get; set; }

        public SceneTypeDCode(ProjectModel project, string className, string @namespace) : base(project, className, @namespace)
        {
            var path = Path.Combine(project.Location, Namespace.Replace(".", @"\\"), $"{ClassName}.data");
             Data = File.Exists(path) ? JSON.Deserialize<SceneTypeDCodeData>(path) : new SceneTypeDCodeData();

            AutoGeneratedFile = true;
            PartialClass = true;
            TypeDClass = true;

            BaseClass = "Scene";
            Usings = new List<string>()
            {
                "TypeOEngine.Typedeaf.Core"
            };

            AddFunction(new Function("public override void Initialize()", () => {

                if(Data.Entities.Count > 0)
                {
                    Writer.AddLine("//Entity start block");
                    foreach(var entity in Data.Entities)
                    {
                        Writer.AddLine($"Entities.Create<{entity}>();");
                    }
                    Writer.AddLine("//Entity end block");
                }

                Writer.AddLine("InternalInitialize();");
            }));

            AddFunction(new Function("public override void Update(double dt)", () => {
                Writer.AddLine("Entities.Update(dt);");
                Writer.AddLine("UpdateLoop.Update(dt);");
            }));
            AddFunction(new Function("public override void Draw()", () => {
                Writer.AddLine("DrawStack.Draw(null);");
            }));
        }

        public override void Save(string location)
        {
            base.Save(location);

            //Save data
            if (Data != null && Data.Entities.Count > 0)
            {
                var path = Path.Combine(location, Namespace.Replace(".", @"\\"), $"{ClassName}.data");
                JSON.Serialize(Data, path);
            }
        }
    }
}
