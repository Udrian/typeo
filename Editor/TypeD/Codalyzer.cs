using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using TypeD.Models;

namespace TypeD
{
    public abstract class Codalyzer
    {
        public class CodeWriter
        {
            private StringBuilder Output { get; set; } = new StringBuilder();
            public int Tabs { get; set; }
            public int TabSkew { get; set; }
            public void AddLine(string line = "", bool tab = false)
            {
                if (tab) Tabs++;
                Output.Append($"{string.Concat(Enumerable.Repeat(Tab, Tabs + TabSkew))}{line}{Environment.NewLine}");
            }
            public void AddLeftCurlyBracket()
            {
                AddLine("{");
                Tabs++;
            }

            public void AddRightCurlyBrackets(int count = 1)
            {
                count = (count < Tabs ? count : Tabs);
                for (int i = 0; i < count; i++)
                {
                    if (Tabs > 0)
                        Tabs--;
                    AddLine("}");
                }
            }

            public void AddAllClosingBrackets()
            {
                AddRightCurlyBrackets(Tabs);
            }

            public void Clear()
            {
                Tabs = 0;
                TabSkew = 0;
                Output.Clear();
            }

            public void Append(CodeWriter code)
            {
                Output.Append(code.Output);
            }

            public void Save(string path)
            {
                if (Output != null)
                {
                    File.WriteAllText(path, Output.ToString());
                }
            }
        }

        public class Function : CodeWriter
        {
            public string Definition { get; set; }

            public Action Body { get; set; }

            public Function(string definition, Action body)
            {
                Definition = definition;
                Body = body;
            }
        }

        public ProjectModel   Project   { get; private set; }
        private static string Tab       { get { return "    "; } }
        protected static string AutoGeneratedText { 
            get { 
                return 
@"/* This file have been autogenerated by TypeD
** Do not change any of it's content */"; 
            } 
        }

        protected CodeWriter Writer { get; private set; }
        private List<Function> Functions { get; set; }
        public List<string> Usings { get; set; }
        public string Namespace { get; set; }
        public string ClassName { get; set; }
        public string BaseClass { get; set; }
        public bool AddAutoGeneratedComment { get; set; }

        public Codalyzer(ProjectModel project, string name, string ns)
        {
            Writer = new CodeWriter();
            Functions = new List<Function>();
            Project = project;
            ClassName = name;
            Namespace = ns;
            Usings = new List<string>();
            AddAutoGeneratedComment = true;
        }

        public void AddFunction(Function function)
        {
            Functions.Add(function);
        }

        public void Generate()
        {
            Writer.Clear();

            if (AddAutoGeneratedComment)
            {
                Writer.AddLine(AutoGeneratedText);
                Writer.AddLine();
            }

            var usings = Usings.Distinct().ToList();
            foreach (var @using in usings)
            {
                Writer.AddLine($"using {@using};");
            }
            Writer.AddLine();
            Writer.AddLine($"namespace {Namespace}");
            Writer.AddLeftCurlyBracket();
            Writer.AddLine($"class {ClassName}{(string.IsNullOrEmpty(BaseClass) ? "" : $" : {BaseClass}")}");
            Writer.AddLeftCurlyBracket();

            foreach(var function in Functions)
            {
                Writer.AddLine(function.Definition);
                Writer.AddLeftCurlyBracket();
                function.Clear();
                function.TabSkew = Writer.Tabs;
                function.Body();
                Writer.AddRightCurlyBrackets();
            }

            Writer.AddAllClosingBrackets();
        }

        public abstract void Save(string location);
    }
}
