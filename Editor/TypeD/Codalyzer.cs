using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using TypeD.Models.Data;
using TypeD.Models.Interfaces;

namespace TypeD
{
    public abstract class Codalyzer
    {
        // Class Definitions
        public class CodeWriter
        {
            // Statics
            private static string Tab { get { return "    "; } }

            // Properties
            private StringBuilder Output { get; set; }
            public int Tabs { get; set; }
            public int TabSkew { get; set; }

            // Constructors
            public CodeWriter()
            {
                Output = new StringBuilder();
            }

            // Functions
            public void AddLine(string line = "", bool tab = false)
            {
                if (tab) Tabs++;
                Output.Append($"{string.Concat(Enumerable.Repeat(Tab, Tabs + TabSkew))}{line}{Environment.NewLine}");
            }

            public void AppendLine(string line= "")
            {
                Output.Append(line);
            }

            public void AddLeftCurlyBracket()
            {
                AddLine("{");
                Tabs++;
            }

            public void AddRightCurlyBrackets(int count = 1)
            {
                count = (count < Tabs ? count : Tabs);
                for (int i = 0; i < count; i++)
                {
                    if (Tabs > 0)
                        Tabs--;
                    AddLine("}");
                }
            }

            public void AddAllClosingBrackets()
            {
                AddRightCurlyBrackets(Tabs);
            }

            public void Clear()
            {
                Tabs = 0;
                TabSkew = 0;
                Output.Clear();
            }

            public void Save(string path)
            {
                if (Output != null)
                {
                    Directory.CreateDirectory(Path.GetDirectoryName(path));
                    File.WriteAllText(path, Output.ToString());
                }
            }
        }

        public class Function
        {
            // Properties
            public string Definition { get; set; }

            public Action<CodeWriter> Body { get; set; }

            // Constructors
            public Function(string definition, Action<CodeWriter> body)
            {
                Definition = definition;
                Body = body;
            }

            public Function(string definition, Action body)
            {
                Definition = definition;
                Body = (_)=> { body(); };
            }

            // Functions
            public void Generate(CodeWriter writer)
            {
                writer.AddLine(Definition);
                writer.AddLeftCurlyBracket();
                Body(writer);
                writer.AddRightCurlyBrackets();
            }
        }

        public class Property
        {
            // Properties
            public string Definition { get; set; }

            public Action<CodeWriter> Body { get; set; }

            // Constructors
            public Property(string definition)
            {
                Definition = definition;
            }

            public Property(string definition, Action body)
            {
                Definition = definition;
                Body = (_) => { body(); };
            }
            public Property(string definition, Action<CodeWriter> body)
            {
                Definition = definition;
                Body = body;
            }

            // Functions
            public void Generate(CodeWriter writer)
            {
                if(Body == null)
                {
                    writer.AddLine($"{Definition} {{ get; set; }}");
                }
                else
                {
                    writer.AddLine(Definition);
                    writer.AddLeftCurlyBracket();
                    Body(writer);
                    writer.AddRightCurlyBrackets();
                }
            }
        }

        // Statics
        protected static string AutoGeneratedText
        {
            get
            {
                return
@"/* This file have been autogenerated by TypeD
** Do not change any of it's content */";
            }
        }

        // Properties
        public Project Project { get; internal set; }
        public IResourceModel Resources { get; internal set; }
        protected CodeWriter Writer { get; private set; }
        protected Func<List<string>> DynamicUsings { get; set; }
        private List<Function> Functions { get; set; }
        private List<Property> Properties { get; set; }
        private List<Type> Interfaces { get; set; }
        public List<string> Usings { get; set; }
        public string Namespace { get; set; }
        public string ClassName { get; set; }
        public string BaseClass { get; set; }
        public bool AutoGeneratedFile { get; set; }
        public bool PartialClass { get; set; }
        public bool TypeDClass { get; set; }
        internal bool Initialized { get; set; }

        // Constructors
        public Codalyzer()
        {
            Writer = new CodeWriter();
            Functions = new List<Function>();
            Properties = new List<Property>();
            Interfaces = new List<Type>();
            Usings = new List<string>();
            AutoGeneratedFile = true;
        }

        protected void Init(string className, string @namespace)
        {
            ClassName = className;
            Namespace = @namespace;
            Initialized = true;
        }

        public abstract void Init();

        // Functions
        public void AddFunction(Function function)
        {
            Functions.Add(function);
        }

        public void AddInterface(Type @interface)
        {
            Interfaces.Add(@interface);
        }

        public void AddProperty(Property property)
        {
            Properties.Add(property);
        }

        public List<Type> GetInterfaces()
        {
            return Interfaces;
        }

        public void Generate()
        {
            var inheritance = new List<string>();
            if(!string.IsNullOrEmpty(BaseClass))
            {
                inheritance.Add(BaseClass.Split(".").LastOrDefault());
            }
            inheritance.AddRange(Interfaces.Select((i) => { return i.Name; }));

            Writer.Clear();

            if (AutoGeneratedFile)
            {
                Writer.AddLine(AutoGeneratedText);
                Writer.AddLine();
            }

            var dynamicUsings = new List<string>();
            if(DynamicUsings != null)
            {
                dynamicUsings = DynamicUsings();
            }
            dynamicUsings.AddRange(Interfaces.Select((i) => { return i.Namespace; }));
            if (!string.IsNullOrEmpty(BaseClass))
            {
                dynamicUsings.Add(string.Join(".", BaseClass.Split(".").SkipLast(1)));
            }
            var usings = Usings.Union(dynamicUsings).Distinct().Where(u => u != Namespace).ToList();
            foreach (var @using in usings)
            {
                Writer.AddLine($"using {@using};");
            }
            Writer.AddLine();
            Writer.AddLine($"namespace {Namespace}");
            Writer.AddLeftCurlyBracket();
            Writer.AddLine($"{(PartialClass? "partial ":"")}class {ClassName}{(inheritance.Count == 0 ? "" : $" : {string.Join(", ", inheritance)}")}");
            Writer.AddLeftCurlyBracket();

            if(Properties.Count > 0)
                Writer.AddLine("// Properties");
            foreach(var property in Properties)
            {
                property.Generate(Writer);
            }

            if (Functions.Count > 0)
            {
                if (Properties.Count > 0)
                    Writer.AddLine();
                Writer.AddLine("// Functions");
            }
            foreach (var function in Functions)
            {
                function.Generate(Writer);
                if(Functions.LastOrDefault() != function)
                    Writer.AddLine();
            }

            Writer.AddAllClosingBrackets();
        }

        public void Save()
        {
            var path = FilePath();
            if (!AutoGeneratedFile && File.Exists(path))
            {
                return;
            }

            Writer.Save(path);
        }

        protected string FilePath()
        {
            return Path.Combine(Project.Location, Namespace.Replace(".", @"\\"), $"{ClassName}{(TypeDClass ? ".typed" : "")}.cs");
        }
    }
}
