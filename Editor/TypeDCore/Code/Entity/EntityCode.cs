using System;
using TypeOEngine.Typedeaf.Core.Entities;

namespace TypeDCore.Code.Entity
{
    class EntityCode : ComponentTypeCode
    {
        // Properties
        public override Type BaseComponentType { get { return typeof(Entity2d); } }

        // Constructors
        public EntityCode(string className, string @namespace, string baseClass, bool updatable, bool drawable) : base(className, @namespace, baseClass)
        {
            if (updatable)
            {
                Usings.Add("TypeOEngine.Typedeaf.Core.Interfaces");
                AddInterface("IUpdatable");
                AddProperty(new Property("public bool Pause"));
                AddFunction(new Function("public void Update(double dt)", () => { }));
            }
            if (drawable)
            {
                Usings.Add("TypeOEngine.Typedeaf.Core.Entities.Interfaces");
                Usings.Add("TypeOEngine.Typedeaf.Core.Engine.Graphics");
                AddInterface("IDrawable");
                AddProperty(new Property("public bool Hidden"));
                AddProperty(new Property("public int DrawOrder"));
                AddFunction(new Function("public void Draw(Canvas canvas)", () => { }));
            }
        }

        // Functions
        public override void Init()
        {
            AutoGeneratedFile = false;
            PartialClass = true;
            TypeDClass = false;

            if(IsBaseComponentType)
            {
                AddFunction(new Function("protected virtual void InternalInitialize()", () => { }));
                AddFunction(new Function("public override void Cleanup()", () => { }));
            }
            else
            {
                AddFunction(new Function("protected override void InternalInitialize()", () => {
                    Writer.AddLine("base.InternalInitialize();");
                }));
                AddFunction(new Function("public override void Cleanup()", () => {
                    Writer.AddLine("base.Cleanup();");
                }));
            }
        }
    }
}
