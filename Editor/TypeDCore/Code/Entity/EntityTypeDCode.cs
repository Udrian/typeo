using System.Collections.Generic;
using TypeD;
using TypeD.Helpers;

namespace TypeDCore.Code.Entity
{
    class EntityTypeDCode : Codalyzer
    {
        public List<string> Drawables { get; set; } = new List<string>();

        public EntityTypeDCode(string className, string @namespace) : base()
        {
            Init(className, @namespace);

            AutoGeneratedFile = true;
            PartialClass = true;
            TypeDClass = true;

            BaseClass = "Entity2d";
        }

        public override void Init()
        {
            var drawablesStartBlock = "//Drawables start block";
            var drawablesEndBlock = "//Drawables end block";

            Usings.AddRange(new List<string>()
            {
                "TypeOEngine.Typedeaf.Core.Entities"
            });

            AddFunction(new Function("public override void Initialize()", () => {
                if (Drawables.Count > 0)
                {
                    Writer.AddLine(drawablesStartBlock);
                    foreach (var drawable in Drawables)
                    {
                        Writer.AddLine($"Drawables.Create<{drawable}>();");
                    }
                    Writer.AddLine(drawablesEndBlock);
                }

                Writer.AddLine("InternalInitialize();");
            }));

            Drawables = FileHelper.FetchStringList(FilePath(), drawablesStartBlock, drawablesEndBlock);
        }
    }
}
