using System;
using System.Collections.Generic;
using TypeD.Helpers;
using TypeOEngine.Typedeaf.Core.Entities;

namespace TypeDCore.Code.Entity
{
    class EntityTypeDCode : ComponentTypeCode
    {
        // Properties
        public override Type BaseComponentType { get { return typeof(Entity2d); } }
        public List<string> Drawables { get; set; }

        // Constructors
        public EntityTypeDCode(string className, string @namespace, string baseClass) : base(className, @namespace, baseClass)
        {
            Drawables = new List<string>();
        }

        // Functions
        public override void Init()
        {
            AutoGeneratedFile = true;
            PartialClass = true;
            TypeDClass = true;

            var drawablesStartBlock = "//Drawables start block";
            var drawablesEndBlock = "//Drawables end block";

            AddFunction(new Function("public override void Initialize()", () => {
                if (!IsBaseComponentType)
                {
                    Writer.AddLine("base.Initialize();");
                }
                if (Drawables.Count > 0)
                {
                    Writer.AddLine(drawablesStartBlock);
                    foreach (var drawable in Drawables)
                    {
                        Writer.AddLine($"Drawables.Create<{drawable}>();");
                    }
                    Writer.AddLine(drawablesEndBlock);
                }

                if (IsBaseComponentType)
                {
                    Writer.AddLine("InternalInitialize();");
                }
            }));

            Drawables = FileHelper.FetchStringList(FilePath(), drawablesStartBlock, drawablesEndBlock);
        }
    }
}
