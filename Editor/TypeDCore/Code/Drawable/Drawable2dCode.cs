using System;
using System.Collections.Generic;
using TypeOEngine.Typedeaf.Core.Entities.Drawables;

namespace TypeDCore.Code.Drawable
{
    class Drawable2dCode : ComponentTypeCode
    {
        // Properties
        public override Type BaseComponentType { get { return typeof(Drawable2d); } }

        // Constructors
        public Drawable2dCode(string className, string @namespace, string baseClass) : base(className, @namespace, baseClass)
        {
        }

        // Functions
        public override void Init()
        {
            AutoGeneratedFile = false;
            PartialClass = false;
            TypeDClass = false;

            Usings.AddRange(new List<string>()
            {
                "TypeOEngine.Typedeaf.Core.Common",
                "TypeOEngine.Typedeaf.Core.Engine.Graphics"
            });

            if (IsBaseComponentType)
            {
                AddProperty(new Property("public override Vec2 Size", () => { Writer.AddLine("get; protected set;"); }));
                AddFunction(new Function("public override void Initialize()", () => { }));
                AddFunction(new Function("public override void Draw(Canvas canvas)", () => { }));
                AddFunction(new Function("public override void Cleanup()", () => { }));
            }
            else
            {
                AddFunction(new Function("public override void Initialize()", () => {
                    Writer.AddLine("base.Initialize();");
                }));
                AddFunction(new Function("public override void Draw(Canvas canvas)", () => {
                    Writer.AddLine("base.Draw(canvas);");
                }));
                AddFunction(new Function("public override void Cleanup()", () => {
                    Writer.AddLine("base.Cleanup();");
                }));
            }
        }
    }
}